#Aby wykryć silne hasło, możemy napisać funkcję, która wykorzystuje wyrażenia regularne do sprawdzenia, czy hasło spełnia następujące kryteria:

#Ma co najmniej 8 znaków.

#Zawiera zarówno duże, jak i małe litery.
#Zawiera co najmniej jedną cyfrę.

import re

def czy_silne_haslo(haslo):
    # Wyrażenie regularne sprawdzające wszystkie warunki naraz
    silne_haslo_regex = re.compile(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$')

    if silne_haslo_regex.match(haslo):
        return True, "Hasło jest silne."
    else:
        return False, "Hasło musi mieć co najmniej 8 znaków, zawierać co najmniej jedną małą literę, jedną dużą literę i jedną cyfrę."

# Przykładowe hasła do testowania
hasla = ["abc123", "Password123", "P@ssw0rd", "StrongPass1", "weakpass"]

for haslo in hasla:
    wynik, komunikat = czy_silne_haslo(haslo)
    print(f"Hasło: {haslo} - {komunikat}")


#Funkcja match w module re (moduł do wyrażeń regularnych w Pythonie) służy do sprawdzania, czy początek danego łańcucha znaków (stringa) pasuje do wzorca (pattern) wyrażenia regularnego.

#Jak działa match?
#re.match(pattern, string):
#pattern: wyrażenie regularne, które chcemy dopasować.
#string: łańcuch znaków, który chcemy sprawdzić pod kątem dopasowania.
#Jeśli string pasuje do pattern od samego początku, match zwraca obiekt Match. Jeśli nie ma dopasowania, zwraca None.

#Różnica między match a search
#re.match sprawdza dopasowanie tylko na początku łańcucha.
#re.search sprawdza dopasowanie w dowolnym miejscu łańcucha.

#Operator ?= w wyrażeniach regularnych w Pythonie jest używany do tzw. "lookahead assertion". Jest to sposób sprawdzania, czy pewien wzorzec znajduje się w tekście bez jego faktycznego przechwytywania.

#Lookahead Assertion (?=)
#Lookahead sprawdza, czy za danym miejscem w tekście znajduje się określony wzorzec, ale nie włącza tego wzorca do wyniku dopasowania.

#Biblioteka re w Pythonie służy do pracy z wyrażeniami regularnymi. Wyrażenia regularne to potężne narzędzie do przetwarzania i manipulowania tekstem, pozwalające na wyszukiwanie, dopasowywanie i zastępowanie wzorców w łańcuchach znaków.

#Najważniejsze Funkcje w Bibliotece re
#re.compile(pattern, flags=0):

#Kompiluje wzorzec wyrażenia regularnego do obiektu wyrażenia regularnego, co może poprawić wydajność, jeśli wzorzec jest używany wielokrotnie.
#pattern: Wzorzec wyrażenia regularnego.
#flags: Opcjonalne flagi zmieniające zachowanie wzorca (np. re.IGNORECASE dla ignorowania wielkości liter).
